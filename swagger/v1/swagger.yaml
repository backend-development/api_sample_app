---
swagger: '2.0'
info:
  title: API V1
  version: v1
  description: This is the first version of my API
securityDefinitions:
  Bearer:
    description: JWT for this API
    type: apiKey
    name: Authorization
    in: header
paths:
  "/api/v1/users":
    get:
      summary: list all the users
      tags:
      - User
      produces:
      - application/json
      security:
      - Bearer: {}
      responses:
        '200':
          description: successful
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    type:
                      type: string
                    attributes:
                      type: object
                      properties:
                        name:
                          type: string
                        email:
                          type: string
                      required:
                      - name
                      - email
                  required:
                  - id
                  - type
                  - attributes
        '401':
          description: wrong token no data
          examples:
            application/json:
              error: Signature verification raised
    post:
      summary: Creates a user
      tags:
      - User
      security:
      - Bearer: {}
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: user
        in: body
        schema:
          type: object
          properties:
            data:
              type: object
              properties:
                type:
                  type: string
                attributes:
                  type: object
                  properties:
                    name:
                      type: string
                    email:
                      type: string
                    password:
                      type: string
                  required:
                  - name
                  - email
                  - password
      responses:
        '201':
          description: user created
          examples:
            application/json:
              data:
                id: '986702026'
                type: user
                attributes:
                  name: Good
                  email: good@hier.com
        '422':
          description: password can't be blank, name can't exist, e-mail can't exist
          examples:
            application/json:
              errors:
              - status: 422
                source:
                  pointer: "/user/email"
                detail: has already been taken
              - status: 422
                source:
                  pointer: "/user/password"
                detail: can't be blank
              - status: 422
                source:
                  pointer: "/user/name"
                detail: has already been taken
  "/api/v1/users/{id}":
    get:
      summary: show user
      tags:
      - User
      security:
      - Bearer: {}
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        type: string
        required: true
      responses:
        '200':
          description: successful
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  id:
                    type: string
                  type:
                    type: string
                  attributes:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
                    required:
                    - name
                    - email
                required:
                - id
                - type
                - attributes
    patch:
      summary: Updates a users data
      tags:
      - User
      security:
      - Bearer: {}
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        type: string
        required: true
      - name: user
        in: body
        schema:
          type: object
          properties:
            data:
              type: object
              properties:
                type:
                  type: string
                id:
                  type: string
                attributes:
                  type: object
                  properties:
                    name:
                      type: string
                    email:
                      type: string
                    password:
                      type: string
                  required:
                  - name
                  - email
                  - password
      responses:
        '200':
          description: 'user updated: Raider heisst jetzt Twix'
          examples:
            application/json:
              data:
                id: '986702028'
                type: user
                attributes:
                  name: Twix
                  email: raider@skywalker.net
    delete:
      summary: Deletes a users
      tags:
      - User
      security:
      - Bearer: {}
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        type: string
        required: true
      responses:
        '204':
          description: user updated
  "/users.json":
    get:
      summary: list all the users
      tags:
      - Legacy
      produces:
      - abpplication/json
      responses:
        '200':
          description: successful
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
                email:
                  type: string
              required:
              - id
              - name
              - email
  "/users/{id}.json":
    get:
      summary: show user
      tags:
      - Legacy
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        type: string
        required: true
      responses:
        '200':
          description: successful
          schema:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
              email:
                type: string
            required:
            - id
            - name
            - email
  "/users/sign_in.json":
    post:
      summary: log in as existing user, get jwt
      tags:
      - Login
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: user
        in: body
        schema:
          type: object
          properties:
            user:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
              - email
              - password
      responses:
        '201':
          description: user logged in
          headers:
            Authorization:
              type: string
              description: new JWT
          examples:
            application/json:
              id: 507602454
              email: greef@bountyhunters.com
              created_at: '2020-05-05T05:56:40.208Z'
              updated_at: '2020-05-05T05:56:40.208Z'
              name: greef
              jti: f4d270f8-3b36-404a-997d-023117046b73
        '401':
          description: login failed
          examples:
            application/json:
              error: Invalid Email or password.
